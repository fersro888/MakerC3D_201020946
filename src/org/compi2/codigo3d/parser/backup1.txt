LIST ::=LIST concat LIST_CUERPO_ID  // puede venir una concatenaci√≥n o para obtener el indice de la lista
                {:
                    
                    //RESULT= new Nodo(list,list_cuerpo, "LIST");
                   /* list.setHijo(list_cuerpo);
                    RESULT=list;*/
                :}
     
    | LIST_CUERPO_ID
    //| corcheteA LIST_CUERPO:list_cuerpo corcheteC
                {:
                    RESULT= new Nodo(list_cuerpo, "LIST");
                :}
   // | id:id 
     //           {:
                  //  RESULT= new Nodo(l, id);
       //         :}
    ;

LIST_CUERPO_ID ::=corcheteA LIST_CUERPO:list_cuerpo corcheteC
               // |id
                ;


LIST_CUERPO ::= corcheteA LIST_SIMPLE:list_simple corcheteC LIST_CORCH_DOB:list_doble // pueden venir dos dimensiones de listas como [[LISTA],[LISTA]]
            {:
                RESULT= new Nodo(list_simple, list_doble, "LIST_CUERPO");
            :}
    | LIST_SIMPLE:list_simple            
            {:
                RESULT= new Nodo(list_simple, "LIST_CUERPO");
            :}
    ;
LIST_CORCH_DOB ::= coma corcheteA LIST_SIMPLE:list_simple corcheteC LIST_CORCH_DOB:list_doble // puede o no venir la 2da. dimension de la lista
            {:
                RESULT= new Nodo(list_simple, list_doble, "LIST_CUERPO_DOBLE");
            :}
    |
    | error
    ;
LIST_SIMPLE ::= LIST_SIMPLE:list_simple coma L:l // todo lo que puede venir adentro de una lista separado por una coma
            {:
                //RESULT= new Nodo(list_simple, l, "LIST_SIMPLE");
                list_simple.setHijo(l);
                RESULT=list_simple;
            :}
    |L:l
            {:
                RESULT= new Nodo(l, "LIST_SIMMPLE");
            :}
    ;
L ::= EXP:exp
        {:
             RESULT=exp;
            //RESULT= new Nodo(exp, "EXPRESION");
        :}
    ;
